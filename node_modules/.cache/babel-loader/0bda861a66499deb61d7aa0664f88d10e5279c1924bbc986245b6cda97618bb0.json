{"ast":null,"code":"var _jsxFileName = \"/Users/UX201446/Documents/GitHub/konva/src/meme-generator/AddedImage.js\";\nimport React, { Component } from 'react';\nimport { Image, Transformer, Group } from 'react-konva';\nimport CloseButton from \"./CloseButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class AddedImage extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSelect = () => {\n      this.handleSelected();\n      if (this.state.selected === true) {\n        this.checkNode();\n        this.props.selectedImage(this.props.index);\n      } else {\n        this.props.selectedImage(null);\n      }\n    };\n    this.handleLoad = () => {\n      // after setState react-konva will update canvas and redraw the layer\n      // because \"image\" property is changed\n      this.setState({\n        image: this.image\n      });\n      this.checkNode();\n    };\n    this.handleSelected = () => {\n      this.setState(state => ({\n        selected: !state.selected\n      }));\n    };\n    this.state = {\n      image: null,\n      selected: true\n    };\n    this.deleteRef = /*#__PURE__*/React.createRef();\n  }\n  componentDidMount() {\n    this.loadImage();\n  }\n  checkNode() {\n    // transormerı ayarlar\n    const selectedNode = this.imageNode;\n    const deleteNode = this.deleteRef.current;\n    this.transformer.add(deleteNode);\n    if (this.state.selected) {\n      this.transformer.nodes([selectedNode]);\n      deleteNode.position(this.transformer.findOne('.top-right').position());\n    } else {\n      this.transformer.detach();\n    }\n    this.transformer.getLayer().batchDraw();\n  }\n  componentDidUpdate(oldProps) {\n    if (oldProps.src !== this.props.src) {\n      this.loadImage();\n    }\n  }\n  componentWillUnmount() {\n    this.image.removeEventListener('load', this.handleLoad);\n  }\n  loadImage() {\n    // save to \"this\" to remove \"load\" handler on unmount\n    this.image = new window.Image();\n    this.image.crossOrigin = \"anonymous\";\n    this.image.src = this.props.src;\n    this.image.width = 300;\n    this.image.width = 300;\n    this.image.addEventListener('load', this.handleLoad);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Group, {\n        draggable: true,\n        onClick: () => this.handleSelect(),\n        onTouchStart: () => this.handleSelect(),\n        ref: node => {\n          this.imageNode = node;\n        },\n        children: /*#__PURE__*/_jsxDEV(Image, {\n          image: this.state.image,\n          ...this.props.properties\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), this.state.selected && /*#__PURE__*/_jsxDEV(Group, {\n        children: /*#__PURE__*/_jsxDEV(CloseButton, {\n          deleteRef: this.deleteRef,\n          delete: this.props.deleteImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Image","Transformer","Group","CloseButton","jsxDEV","_jsxDEV","AddedImage","constructor","props","handleSelect","handleSelected","state","selected","checkNode","selectedImage","index","handleLoad","setState","image","deleteRef","createRef","componentDidMount","loadImage","selectedNode","imageNode","deleteNode","current","transformer","add","nodes","position","findOne","detach","getLayer","batchDraw","componentDidUpdate","oldProps","src","componentWillUnmount","removeEventListener","window","crossOrigin","width","addEventListener","render","Fragment","children","draggable","onClick","onTouchStart","ref","node","properties","fileName","_jsxFileName","lineNumber","columnNumber","delete","deleteImage"],"sources":["/Users/UX201446/Documents/GitHub/konva/src/meme-generator/AddedImage.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { Image, Transformer, Group } from 'react-konva';\nimport CloseButton from \"./CloseButton\"\nexport default class AddedImage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      image: null,\n      selected: true,\n    }\n    this.deleteRef = React.createRef();\n  }\n\n  componentDidMount() {\n\n    this.loadImage();\n\n  }\n  checkNode() {\n    // transormerı ayarlar\n    const selectedNode = this.imageNode;\n    const deleteNode = this.deleteRef.current;\n    this.transformer.add(deleteNode)\n    if (this.state.selected) {\n      this.transformer.nodes([selectedNode]);\n      deleteNode.position(this.transformer.findOne('.top-right').position());\n    }\n    else {\n      this.transformer.detach();\n    }\n    this.transformer.getLayer().batchDraw();\n  }\n  componentDidUpdate(oldProps) {\n    if (oldProps.src !== this.props.src) {\n      this.loadImage();\n    }\n  }\n  componentWillUnmount() {\n    this.image.removeEventListener('load', this.handleLoad);\n  }\n  handleSelect = () => {\n\n    this.handleSelected()\n\n    if (this.state.selected === true) {\n      this.checkNode()\n      this.props.selectedImage(this.props.index);\n    }\n    else {\n      this.props.selectedImage(null);\n    }\n  }\n\n  loadImage() {\n    // save to \"this\" to remove \"load\" handler on unmount\n    this.image = new window.Image();\n    this.image.crossOrigin = \"anonymous\";\n    this.image.src = this.props.src;\n    this.image.width = 300;\n    this.image.width = 300;\n\n    this.image.addEventListener('load', this.handleLoad);\n  }\n  handleLoad = () => {\n    // after setState react-konva will update canvas and redraw the layer\n    // because \"image\" property is changed\n    this.setState({\n      image: this.image\n    });\n    this.checkNode();\n  }\n  handleSelected = () => {\n    this.setState(state => ({\n      selected: !state.selected\n    }))\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Group draggable\n          onClick={() => this.handleSelect()}\n          onTouchStart={() => this.handleSelect()}\n          ref={node => {\n            this.imageNode = node;\n          }}\n        >\n\n          <Image\n            image={this.state.image}\n            {...this.props.properties}\n          />\n        </Group>\n        {this.state.selected &&\n          <Group>\n\n            \n            <CloseButton deleteRef={this.deleteRef} delete={this.props.deleteImage} />\n          </Group>\n        }\n\n\n      </React.Fragment>\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}