{"ast":null,"code":"var _jsxFileName = \"/Users/UX201446/Documents/GitHub/konva/src/meme-generator/CanvasImage.js\";\nimport React, { Component } from \"react\";\nimport { Image } from \"react-konva\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class CanvasImage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      image: null\n    };\n    this.handleLoad = () => {\n      // after setState react-konva will update canvas and redraw the layer\n      // because \"image\" property is changed\n      this.setState({\n        image: this.image\n      });\n      // if you keep same image object during source updates\n      // you will have to update layer manually:\n      // this.imageNode.getLayer().batchDraw();\n    };\n  }\n  componentDidMount() {\n    this.loadImage();\n  }\n  componentDidUpdate(oldProps) {\n    const {\n      props\n    } = this;\n    if (oldProps.src !== props.src || oldProps.width !== props.width || oldProps.height !== props.height) {\n      if (!this.props.src) {\n        this.setState({\n          image: null\n        });\n      } else {\n        this.loadImage();\n      }\n    }\n  }\n  componentWillUnmount() {\n    this.image.removeEventListener(\"load\", this.handleLoad);\n  }\n  async loadImage() {\n    // save to \"this\" to remove \"load\" handler on unmount\n    this.image = new window.Image();\n    let src = this.props.src;\n    this.image.src = src;\n    this.image.sameSite = \"None\";\n    this.image.crossOrigin = \"anonymous\";\n    this.image.width = this.props.width;\n    this.image.height = this.props.height;\n    this.image.addEventListener(\"load\", this.handleLoad);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(Image, {\n      x: this.props.x,\n      y: this.props.y,\n      image: this.state.image,\n      ref: node => {\n        this.imageNode = node;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Image","jsxDEV","_jsxDEV","CanvasImage","constructor","args","state","image","handleLoad","setState","componentDidMount","loadImage","componentDidUpdate","oldProps","props","src","width","height","componentWillUnmount","removeEventListener","window","sameSite","crossOrigin","addEventListener","render","x","y","ref","node","imageNode","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/UX201446/Documents/GitHub/konva/src/meme-generator/CanvasImage.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { Image } from \"react-konva\";\nexport default class CanvasImage extends Component {\n  state = {\n    image: null,\n  };\n  componentDidMount() {\n    this.loadImage();\n  }\n  componentDidUpdate(oldProps) {\n    const { props } = this;\n    if (\n      oldProps.src !== props.src ||\n      oldProps.width !== props.width ||\n      oldProps.height !== props.height\n    ) {\n      if (!this.props.src) {\n        this.setState({\n          image: null,\n        });\n      } else {\n        this.loadImage();\n      }\n    }\n  }\n  componentWillUnmount() {\n    this.image.removeEventListener(\"load\", this.handleLoad);\n  }\n\n  async loadImage() {\n    // save to \"this\" to remove \"load\" handler on unmount\n    this.image = new window.Image();\n    let src = this.props.src;\n  \n    this.image.src = src;\n    this.image.sameSite = \"None\";\n    this.image.crossOrigin=\"anonymous\"\n    this.image.width = this.props.width;\n    this.image.height = this.props.height;\n    this.image.addEventListener(\"load\", this.handleLoad);\n  }\n  handleLoad = () => {\n    // after setState react-konva will update canvas and redraw the layer\n    // because \"image\" property is changed\n    this.setState({\n      image: this.image,\n    });\n    // if you keep same image object during source updates\n    // you will have to update layer manually:\n    // this.imageNode.getLayer().batchDraw();\n  };\n  render() {\n    return (\n      <Image\n        x={this.props.x}\n        y={this.props.y}\n        image={this.state.image}\n        \n        ref={(node) => {\n          this.imageNode = node;\n        }}\n      />\n    );\n  }\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,KAAK,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACpC,eAAe,MAAMC,WAAW,SAASJ,SAAS,CAAC;EAAAK,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KACjDC,KAAK,GAAG;MACNC,KAAK,EAAE;IACT,CAAC;IAAA,KAoCDC,UAAU,GAAG,MAAM;MACjB;MACA;MACA,IAAI,CAACC,QAAQ,CAAC;QACZF,KAAK,EAAE,IAAI,CAACA;MACd,CAAC,CAAC;MACF;MACA;MACA;IACF,CAAC;EAAA;EA5CDG,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACC,SAAS,CAAC,CAAC;EAClB;EACAC,kBAAkBA,CAACC,QAAQ,EAAE;IAC3B,MAAM;MAAEC;IAAM,CAAC,GAAG,IAAI;IACtB,IACED,QAAQ,CAACE,GAAG,KAAKD,KAAK,CAACC,GAAG,IAC1BF,QAAQ,CAACG,KAAK,KAAKF,KAAK,CAACE,KAAK,IAC9BH,QAAQ,CAACI,MAAM,KAAKH,KAAK,CAACG,MAAM,EAChC;MACA,IAAI,CAAC,IAAI,CAACH,KAAK,CAACC,GAAG,EAAE;QACnB,IAAI,CAACN,QAAQ,CAAC;UACZF,KAAK,EAAE;QACT,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,IAAI,CAACI,SAAS,CAAC,CAAC;MAClB;IACF;EACF;EACAO,oBAAoBA,CAAA,EAAG;IACrB,IAAI,CAACX,KAAK,CAACY,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAACX,UAAU,CAAC;EACzD;EAEA,MAAMG,SAASA,CAAA,EAAG;IAChB;IACA,IAAI,CAACJ,KAAK,GAAG,IAAIa,MAAM,CAACpB,KAAK,CAAC,CAAC;IAC/B,IAAIe,GAAG,GAAG,IAAI,CAACD,KAAK,CAACC,GAAG;IAExB,IAAI,CAACR,KAAK,CAACQ,GAAG,GAAGA,GAAG;IACpB,IAAI,CAACR,KAAK,CAACc,QAAQ,GAAG,MAAM;IAC5B,IAAI,CAACd,KAAK,CAACe,WAAW,GAAC,WAAW;IAClC,IAAI,CAACf,KAAK,CAACS,KAAK,GAAG,IAAI,CAACF,KAAK,CAACE,KAAK;IACnC,IAAI,CAACT,KAAK,CAACU,MAAM,GAAG,IAAI,CAACH,KAAK,CAACG,MAAM;IACrC,IAAI,CAACV,KAAK,CAACgB,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAACf,UAAU,CAAC;EACtD;EAWAgB,MAAMA,CAAA,EAAG;IACP,oBACEtB,OAAA,CAACF,KAAK;MACJyB,CAAC,EAAE,IAAI,CAACX,KAAK,CAACW,CAAE;MAChBC,CAAC,EAAE,IAAI,CAACZ,KAAK,CAACY,CAAE;MAChBnB,KAAK,EAAE,IAAI,CAACD,KAAK,CAACC,KAAM;MAExBoB,GAAG,EAAGC,IAAI,IAAK;QACb,IAAI,CAACC,SAAS,GAAGD,IAAI;MACvB;IAAE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEN;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}